---
// Packages
import { Picture } from "astro:assets";
import type { ImageMetadata } from "astro";

// Components
import Layout from "layouts/LayoutLanding.astro";
import speakers from "../../i18n/data/speakers.json";
import schedule from "json/Schedule.json";
import scheduleForum from "json/Schedule-forum.json";

// i18n utilities
import { getCurrentLocale, createTranslationFunction, loadTranslations } from "../../i18n/utils";

// Load translations
await loadTranslations();

// Types
interface Speaker {
  id: string;
  name: {
    en: string;
    zh: string;
  };
  bio: {
    en: string;
    zh: string;
  };
  roleOrg: {
    en: string;
    zh: string;
  };
  image?: string;
  socialLinks?: {
    website?: string;
    github?: string;
    twitter?: string;
    linkedin?: string;
    mastodon?: string;
    [key: string]: string | undefined;
  };
}

interface Session {
  title: string;
  speakers: { name: string }[];
  date: string;
  timeSlot: string;
  category?: string;
}

interface schedule {
  sessions: Record<string, Session[]>;
}

// Get the speaker name from the route parameter
export async function getStaticPaths() {
  return speakers.speakers.map((speaker: Speaker) => ({
    params: { name: speaker.id },
    props: { speaker },
  }));
}

const { speaker } = Astro.props as { speaker: Speaker };

// Get current locale and create translation function
const currentLocale = getCurrentLocale(Astro);
const t = createTranslationFunction(currentLocale);

// Import all images
const images = import.meta.glob<{ default: ImageMetadata }>(
  "images/speakers/*.{jpeg,jpg,png,gif}"
);

// Find speaker's sessions across all categories and forum schedule
const speakerSessions = [
  // Get sessions from main schedule
  ...Object.entries(schedule.sessions).reduce(
    (acc: Session[], [category, sessions]: [string, Session[]]) => {
      const matchingSessions = sessions
        .filter((session) =>
          session.speakers.some((s) => s.name === speaker.name[currentLocale])
        )
        .map((session) => ({
          ...session,
          category,
        }));

      return [...acc, ...matchingSessions];
    },
    []
  ),
  // Get sessions from forum schedule
  ...scheduleForum
    .filter(
      (session) =>
        session.speakers &&
        session.speakers.some((s) => s.name === speaker.name[currentLocale])
    )
    .map((session) => ({
      title: session.title,
      speakers: session.speakers,
      date: session.date,
      timeSlot: session.timeSlot,
      category: "Forum",
    })),
];

// Social links mapping for icons
const socialIconMap: Record<string, string> = {
  website: "/icons/icon-website.svg",
  github: "/icons/icon-github.svg",
  twitter: "/icons/icon-x.svg",
  linkedin: "/icons/icon-linkedin.svg",
  mastodon: "/icons/icon-mastodon.svg",
};
---

<Layout
  title={`${speaker.name[currentLocale]} â€“ GOSIM Hangzhou 2025`}
  description={speaker.roleOrg[currentLocale]}
  navBackground="light"
  pageTransitionName={speaker.name[currentLocale]}
>
  <section
    class="section speaker-detail-header"
    data-theme-section="light"
    data-bg-section="light"
  >
    <div class="gradient-circle-wrap">
      <div class="gradient-circle"></div>
    </div>
    <div class="container">
      <div class="row">
        <div class="col-speaker">
          <div class="row-speaker">
            {
              speaker?.image &&
                images[`/public/images/speakers/${speaker.image}`] && (
                  <div class="speaker-detail-image">
                    <Picture
                      src={images[`/public/images/speakers/${speaker.image}`]()}
                      formats={["webp", "jpg"]}
                      alt={speaker.name[currentLocale]}
                      class="speaker-detail-image"
                      widths={[275, 400, 500, 600, 750, 900]}
                      sizes="(max-width: 700px) 58vw, 450px"
                      height={400}
                      width={400}
                      loading="eager"
                      style="object-fit: cover; object-position: center 15% !important;"
                    />
                  </div>
                )
            }
            <div class="speaker-row-meta">
              <h1 class="h2">{speaker.name[currentLocale]}</h1>
              <p>{speaker.roleOrg[currentLocale]}</p>
            </div>
          </div>

          <div class="box-row box-row-tag">
            <div
              class="card-tags group-tags social-wrap"
              style="gap: 1rem; align-items: center;"
            >
              {
                Object.entries(speaker.socialLinks || {})
                  .filter(
                    ([_, url]) =>
                      url && url.trim() !== "" && url !== "undefined"
                  )
                  .map(([platform, url]) => (
                    <a
                      href={url}
                      class="social-link"
                      style="margin: 0;"
                      social-type={platform}
                      target="_blank"
                    >
                      <img
                        src={
                          socialIconMap[platform] ||
                          "assets/img/icon-website.svg"
                        }
                        width="Auto"
                        height="19"
                        alt={platform}
                      />
                    </a>
                  ))
              }
            </div>
          </div>

          <div class="box-row box-row-text styled-content">
            <p set:html={speaker.bio[currentLocale].replace(/\n/g, "<br>")} />
          </div>
        </div>
      </div>
    </div>
  </section>

  {
    speakerSessions?.length > 0 && (
      <section
        class="section section-agenda-grid speaker-sessions"
        id="grid"
        data-theme-section="light"
        data-bg-section="light"
        data-scroll-section=""
      >
        <div class="container">
          <div class="row row-list accordion visible">
            <h2 class="h3">{t('speakers.sessions')}</h2>
            <div class="list-group speaker-sessions">
              <ul class="row row-list">
                {speakerSessions.map((session) => (
                  <a
                    href={`/schedule/${session.title
                      .toLowerCase()
                      .replace(/[^\w\s-]/g, "")
                      .replace(/\s+/g, "-")
                      .replace(/-+/g, "-")
                      .trim()}/`}
                  >
                    <li class="single-agenda-card single-accordion-item card-hover">
                      <div class="top">
                        <div class="left">
                          <div class="timeslot">
                            <p class="timedate">{session.date}</p>
                            <p>{session.timeSlot}</p>
                          </div>
                          <h3 class="h5">{session.title}</h3>
                        </div>
                        <div class="tracks">
                          <div class="single-filter">
                            <span>{session.category}</span>
                          </div>
                        </div>
                      </div>
                    </li>
                  </a>
                ))}
              </ul>
            </div>
          </div>
        </div>
      </section>
    )
  }
</Layout>

<style>
  .speaker-detail-image {
    position: relative;
    overflow: hidden;
    width: 100%;
  }
</style>
