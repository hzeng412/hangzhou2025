---
// Packages
import { Picture } from "astro:assets";
import type { ImageMetadata } from "astro";

// Components
import Layout from "layouts/LayoutLanding.astro";
import speakers from "../../../i18n/data/workshops.json";
import schedule from "json/Schedule.json";
import scheduleForum from "json/Schedule-forum.json";

// i18n utilities
import { getCurrentLocale, createTranslationFunction, loadTranslations } from "../../../i18n/utils";

// Load translations
await loadTranslations();

// Force Chinese locale for this page
const currentLocale = 'zh';
const t = createTranslationFunction(currentLocale);

// Types
interface Speaker {
  id: string;
  name: {
    en: string;
    zh: string;
  };
  bio: {
    en: string;
    zh: string;
  };
  roleOrg: {
    en: string;
    zh: string;
  };
  image?: string;
  socialLinks?: {
    website?: string;
    github?: string;
    twitter?: string;
    linkedin?: string;
    mastodon?: string;
    [key: string]: string | undefined;
  };
}

interface Session {
  title: string;
  speakers: { name: string }[];
  date: string;
  timeSlot: string;
  category?: string;
}

// Generate static paths for workshops
export async function getStaticPaths() {
  const paths: { params: { name: string }; props: { speaker: Speaker } }[] = [];

  speakers.speakers.forEach((speaker: Speaker) => {
    paths.push({
      params: {
        name: speaker.id,
      },
      props: { speaker },
    });
  });

  return paths;
}

const { speaker } = Astro.props;

// Get speaker image
const getSpeakerImage = async (imagePath: string): Promise<ImageMetadata> => {
  const images = import.meta.glob<{ default: ImageMetadata }>(
    "/src/images/speakers/*.{jpeg,jpg,png,gif,webp}",
  );
  if (images[imagePath]) {
    const module = await images[imagePath]();
    return module.default;
  }
  throw new Error(`"${imagePath}" does not exist in glob: "src/images/speakers/*"`);
};

// Find sessions for this speaker
const findSpeakerSessions = (speakerName: string): Session[] => {
  const sessions: Session[] = [];
  
  // Search in main schedule
  if (schedule.sessions && typeof schedule.sessions === 'object') {
    Object.entries(schedule.sessions).forEach(([category, categoryEvents]) => {
      if (Array.isArray(categoryEvents)) {
        categoryEvents.forEach((event: any) => {
          if (event.speakers?.some((s: any) => s.name === speakerName)) {
            sessions.push({
              title: event.title,
              speakers: event.speakers,
              date: event.date,
              timeSlot: event.timeSlot,
              category,
            });
          }
        });
      }
    });
  }

  // Search in forum schedule
  if (scheduleForum.sessions && typeof scheduleForum.sessions === 'object') {
    Object.entries(scheduleForum.sessions).forEach(([category, categoryEvents]) => {
      if (Array.isArray(categoryEvents)) {
        categoryEvents.forEach((event: any) => {
          if (event.speakers?.some((s: any) => s.name === speakerName)) {
            sessions.push({
              title: event.title,
              speakers: event.speakers,
              date: event.date,
              timeSlot: event.timeSlot,
              category,
            });
          }
        });
      }
    });
  }

  return sessions;
};

const speakerSessions = findSpeakerSessions(speaker.name.en);

let speakerImage: ImageMetadata | undefined;
if (speaker.image) {
  try {
    speakerImage = await getSpeakerImage(`/src/images/speakers/${speaker.image}`);
  } catch (error) {
    console.warn(`Could not load image for speaker ${speaker.name.zh}:`, error);
  }
}
---

<Layout
  title={speaker.name.zh}
  description={speaker.bio.zh}
  navDarkMode={false}
  navBackground="header-light"
  pageTransitionName="Workshop"
>
  <div class="section-wrap" data-theme-section="light" data-bg-section="light">
    <div class="container">
      <div class="workshop-detail">
        <div class="workshop-header">
          <div class="speaker-info">
            {speakerImage && (
              <Picture
                src={speakerImage}
                alt={speaker.name.zh}
                width={120}
                height={120}
                class="speaker-image"
              />
            )}
            <div class="speaker-details">
              <h1 class="h2">{speaker.name.zh}</h1>
              <p class="speaker-role">{speaker.roleOrg.zh}</p>
            </div>
          </div>
        </div>

        <div class="workshop-content">
          <div class="speaker-bio">
            <h3>简介</h3>
            <p>{speaker.bio.zh}</p>
          </div>

          {speakerSessions.length > 0 && (
            <div class="speaker-sessions">
              <h3>工作坊</h3>
              <div class="sessions-list">
                {speakerSessions.map((session) => (
                  <div class="session-card">
                    <h4>{session.title}</h4>
                    <div class="session-meta">
                      <span class="session-date">{session.date}</span>
                      <span class="session-time">{session.timeSlot}</span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {speaker.socialLinks && (
            <div class="social-links">
              <h3>社交链接</h3>
              <div class="links-grid">
                {Object.entries(speaker.socialLinks).map(([platform, url]) => (
                  url && (
                    <a href={url} target="_blank" rel="noopener noreferrer" class="social-link">
                      {platform}
                    </a>
                  )
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  .workshop-detail {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem 0;
  }

  .workshop-header {
    margin-bottom: 2rem;
  }

  .speaker-info {
    display: flex;
    align-items: center;
    gap: 2rem;
  }

  .speaker-image {
    border-radius: 50%;
    object-fit: cover;
  }

  .speaker-role {
    color: var(--color-text-muted);
    margin: 0.5rem 0 0 0;
  }

  .workshop-content {
    display: grid;
    gap: 2rem;
  }

  .speaker-bio,
  .speaker-sessions,
  .social-links {
    padding: 1.5rem;
    background: var(--color-light-tint);
    border-radius: var(--border-radius);
  }

  .speaker-bio h3,
  .speaker-sessions h3,
  .social-links h3 {
    margin: 0 0 1rem 0;
  }

  .sessions-list {
    display: grid;
    gap: 1rem;
  }

  .session-card {
    padding: 1rem;
    background: var(--color-light);
    border-radius: var(--border-radius);
    border: 1px solid var(--color-border);
  }

  .session-card h4 {
    margin: 0 0 0.5rem 0;
  }

  .session-meta {
    display: flex;
    gap: 1rem;
    color: var(--color-text-muted);
    font-size: 0.9rem;
  }

  .links-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .social-link {
    padding: 0.5rem 1rem;
    background: var(--color-primary);
    color: var(--color-dark);
    text-decoration: none;
    border-radius: var(--border-radius);
    font-weight: 500;
    text-transform: capitalize;
    transition: opacity 0.3s ease;
  }

  .social-link:hover {
    opacity: 0.8;
  }

  @media (max-width: 768px) {
    .speaker-info {
      flex-direction: column;
      text-align: center;
    }
  }
</style>