---
// Components
import Button from "components/Button.astro";
import Logo from "./Logo.astro";
import NotificationBar from "components/NotificationBar.astro";
import LanguageSwitcher from "./LanguageSwitcher.astro";

// i18n utilities
import { getCurrentLocale, createTranslationFunction, loadTranslations, getLocalizedPath, getAlternateLinks } from "../i18n/utils";

// Load translations
await loadTranslations();

// Get current locale and translation function
const currentLocale = getCurrentLocale(Astro);
const t = createTranslationFunction(currentLocale);

const hasNotificationBar = false; // Set this to false when NotificationBar is removed or page will crash

// Define navigation links with translation keys
const navigationConfig = {
  en: [
    {
      text: "Speakers",
      link: "/speakers",
    },
    {
      text: "Workshops", 
      link: "/workshops",
    },
    {
      text: "Tracks",
      link: "/#tracks",
    },
    {
      text: "Spotlight",
      link: "/#spotlight",
    },
    {
      text: "Co-located Events",
      subLinks: [
        {
          text: "RustGlobal & RustChinaConf",
          link: "https://rustcc.cn/2025conf/",
          openInNewTab: false,
        },
        {
          text: "AI Vision Forum",
          link: "https://forum.gosim.org/en/",
          openInNewTab: false,
        },
        {
          text: "Open for SDG Conference",
          link: "https://opensdg.gosim.org/en/",
          openInNewTab: false,
        },
        {
          text: "Super Agent Campathon",
          link: "https://mofa.ai/super-agent-hackathon/",
          openInNewTab: false,
        },
        {
          text: "Code Alert Hackathon",
          link: "https://hackathon.mofa.ai",
          openInNewTab: false,
        },
      ],
    },
    {
      text: "Venue, Travel, & Visa",
      subLinks: [
        {
          text: "Venue",
          link: "/venue",
        },
        {
          text: "General Travel Info",
          link: "/general-travel",
        },
        {
          text: "Chinese Visa",
          link: "/chinese-visa",
        },
      ],
    },
  ],
  zh: [
    {
      text: "讲师",
      link: "/speakers",
    },
    {
      text: "工作坊",
      link: "/workshops",
    },
    {
      text: "主题",
      link: "/#tracks",
    },
    {
      text: "Spotlight",
      link: "/#spotlight",
    },
    {
      text: "同期活动",
      subLinks: [
        {
          text: "RustGlobal & RustChinaConf",
          link: "https://rustcc.cn/2025conf/",
          openInNewTab: false,
        },
        {
          text: "人工智能愿景论坛",
          link: "https://forum.gosim.org",
          openInNewTab: false,
        },
        {
          text: "开放共创 · 可持续发展大会",
          link: "https://opensdg.gosim.org/cn/",
          openInNewTab: false,
        },
        {
          text: "超级智能体 Campathon",
          link: "https://mofa.ai/super-agent-hackathon/",
          openInNewTab: false,
        },
        {
          text: "Code Alert 黑客松大赛",
          link: "https://hackathon.mofa.ai",
          openInNewTab: false,
        },
      ],
    },
    {
      text: "会议地点",
      link: "/venue"
    },
  ]
};

// Get localized navigation links
const links = navigationConfig[currentLocale].map(link => ({
  ...link,
  link: (link.link && link.link.startsWith('http')) ? link.link : getLocalizedPath(link.link || '/', currentLocale),
  subLinks: link.subLinks?.map(subLink => ({
    ...subLink,
    link: (subLink.link && subLink.link.startsWith('http')) ? subLink.link : getLocalizedPath(subLink.link || '/', currentLocale)
  }))
}));

const slug = Astro.url.pathname;
const alternateLinks = getAlternateLinks(slug);
const otherLocaleLink = alternateLinks.find(link => link.locale !== currentLocale);
---

<header>
  {
    hasNotificationBar && (
      <NotificationBar
        text={t('navigation.notification_text')}
        link="https://x.com/gosimfoundation/status/1912744752925282408"
      />
    )
  }

  <div class="floating-ticket-button">
    <Button
      text={t('navigation.get_tickets')}
      link={getLocalizedPath('/tickets', currentLocale)}
      class="btn primary btn-floating btn-hover"
    />
  </div>

  <div class="mobile-nav">
    <div class="overlay overlay-dark" data-navigation-toggle="close"></div>

    <div class="mobile-nav-box">
      <div class="box-row box-row-logo">
        <Logo />
      </div>
      <nav class="box-row box-row-nav" aria-label="Navigation Mobile">
        <ul>
          {
            links.map((loop) => (
              <li
                class={`link link-hover ${loop.subLinks ? "has-sublinks" : ""}`}
                data-barba-update
                data-link-status={loop.link === slug ? "active" : "not-active"}
                data-has-sublinks={loop.subLinks ? "true" : "false"}
                data-sublinks={
                  loop.subLinks ? JSON.stringify(loop.subLinks) : "[]"
                }
              >
                {loop?.subLinks ? (
                  <button class="link-click">
                    <span>{loop.text}</span>
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="16"
                      height="16"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      class="ml-2 inline-block"
                    >
                      <path d="m6 9 6 6 6-6" />
                    </svg>
                  </button>
                ) : (
                  <a class="link-click" href={loop.link}>
                    <span>{loop.text}</span>
                  </a>
                )}
              </li>
            ))
          }
          <li class="link link-hover mobile-language-item">
            <LanguageSwitcher variant="mobile" />
          </li>
        </ul>
      </nav>
      <div class="box-row box-row-btn">
        <Button
          text={t('navigation.get_tickets')}
          link={getLocalizedPath('/tickets', currentLocale)}
          class="btn primary xl btn-hover"
        />
      </div>
    </div>
  </div>

  <button
    class="hamburger btn-floating"
    aria-label="Open menu"
    data-navigation-toggle="toggle"
    data-has-notification={hasNotificationBar}
  >
    <div class="hamburger-fill"></div>
    <div class="bar bar-top"></div>
    <div class="bar bar-bottom"></div>
  </button>

  <div
    class="btn light btn-filter btn-filter-floating btn-hover"
    data-has-notification={hasNotificationBar}
  >
    <div class="btn-click filter-alpha-animate" data-filter-toggle="toggle">
      <div class="btn-content original">
        <div class="btn-fill"></div>
        <span>{t('navigation.filter')}</span>
      </div>
      <div class="border-box"></div>
    </div>
  </div>

  <div
    class="main-nav-bar"
    style="opacity: 1;"
    data-has-notification={hasNotificationBar}
  >
    <div class="overlay nav-fill"></div>
    <div class="row">
      <div class="border-bottom"></div>

      <div class="logo">
        <a href={getLocalizedPath('/', currentLocale)} aria-label={t('navigation.go_to_homepage')} class="logo-click">
          <Logo />
          <Logo />
        </a>
      </div>

      <nav aria-label="Navigation Desktop">
        <ul>
          {
            links.map((loop) => (
              <li
                class={`link link-hover ${loop.subLinks ? "has-sublinks" : ""}`}
                style="position: relative;"
                data-barba-update
                data-link-status={loop.link === slug ? "active" : "not-active"}
                data-has-sublinks={loop.subLinks ? "true" : "false"}
                data-sublinks={
                  loop.subLinks ? JSON.stringify(loop.subLinks) : "[]"
                }
              >
                {loop?.subLinks ? (
                  <button class="link-click">
                    <span>{loop.text}</span>
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="16"
                      height="16"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      class="ml-2 inline-block"
                    >
                      <path d="m6 9 6 6 6-6" />
                    </svg>
                  </button>
                ) : (
                  <a class="link-click" href={loop.link}>
                    <span>{loop.text}</span>
                  </a>
                )}
              </li>
            ))
          }
        </ul>
      </nav>

      <div class="header-buttons">
        <LanguageSwitcher variant="dropdown" />
        <Button
          text={t('navigation.get_tickets')}
          link={getLocalizedPath('/tickets', currentLocale)}
          class="btn outline btn-hover"
        />
      </div>
      <div class="hamburger outline" data-navigation-toggle="toggle">
        <div class="hamburger-fill"></div>
        <div class="bar bar-top"></div>
        <div class="bar bar-bottom"></div>
      </div>

      <div class="btn light btn-filter btn-filter-static btn-hover">
        <div class="btn-click filter-alpha-animate" data-filter-toggle="toggle">
          <div class="btn-content original">
            <div class="btn-fill"></div>
            <span>{t('navigation.filter')}</span>
          </div>
          <div class="border-box"></div>
        </div>
      </div>
    </div>
  </div>
</header>

<style>
  .floating-ticket-button {
    position: relative;
    top: -15px;
    z-index: 10;
  }

  /* Ensure notification bar is clickable */
  :global(.notification-bar) {
    position: relative;
    z-index: 20; /* Higher than other header elements */
    width: 100%;
    pointer-events: auto;
  }

  .main-nav-bar[data-has-notification="true"] {
    padding-top: calc(var(--row-gap) + 45px);
  }

  .hamburger.btn-floating[data-has-notification="true"],
  .btn.btn-filter-floating[data-has-notification="true"] {
    margin-top: 32px;
  }

  /* Header buttons layout */
  .header-buttons {
    display: flex;
    align-items: center;
    gap: 15px;
    color: inherit;
  }

  /* Mobile language menu */
  .mobile-language-item {
    margin-top: 15px;
  }
</style>
